char *ptr = NULL;

    STACK_INIT(&stk, 10, &last_err)
    if (last_err != ERR_OK) {
        *return_err = last_err;
        DEBUG_ERROR(ERR_INIT)
        CLEAR_MEMORY(exit_mark)
    }

    // printf("canary_left: %llx\n", stk.CANARY_LEFT);
    // printf("canary_left: %llx\n", stk.CANARY_MID);

    ptr = ((char *) (&stk)) + 80; // если написать +20-60, то изменяются указатели на data, canary_t, hash_t, ломая защиту
    printf("ptr: [%p]\n", ptr);
    *ptr = 0x1;

    // printf("destruction is done:)))\n\n");

    // HASH_print(&stk.HASH);
    DUMP(&stk)
    VERIFY(&stk, &last_err, )
    DEBUG_ERROR(last_err)
    // for (stack_elem_t i = 0; i < 10; i++) {
    //     stack_push(&stk, i, &last_err);
    //     DUMP(&stk)
    //     if (last_err != ERR_OK) {
    //         *return_err = last_err;
    //         DEBUG_ERROR(last_err);
    //         CLEAR_MEMORY(exit_mark);
    //     }
    // }

    // // HASH_print(&stk.HASH);

    // for (stack_elem_t i = 5; i > 0; i--) {
    //     stack_pop(&stk, &last_err);
    //     DUMP(&stk)
    //     fprintf(stderr, "\n\n");
    //     if (last_err != ERR_OK) {
    //         *return_err = last_err;
    //         DEBUG_ERROR(last_err);
    //         CLEAR_MEMORY(exit_mark);
    //     }
    // }

    // HASH_print();
    // printf("\n");
    // HASH_print();
    // printf("canary_left: %llu\n", stk.CANARY_LEFT);
    // printf("canary_left: %llu\n", stk.CANARY_MID);

    stack_destroy(&stk);

    return;

    exit_mark: